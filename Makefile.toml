env_files = [
    { path = ".env/mainnet.env", profile = "mainnet" },
    { path = ".env/testnet.env", profile = "testnet" },
    { path = ".env/local.env", profile = "local" },
    { path = ".env/custom.env", profile = "custom" },
    { path = ".env/local.env", profile = "development" },
]

[config]
default_to_workspace = false
skip_core_tasks = true

[env]
NEAR = "near"
CARGO = "cargo"
ENGINE_CARGO_TARGET = "wasm32-unknown-unknown"
SWEEP_DAYS = 30

[tasks.sweep]
category = "Cleanup"
install_crate = "cargo-sweep"
command = "${CARGO}"
args = [
    "sweep",
    "--time",
    "${SWEEP_DAYS}",
]

[tasks.clean-cargo]
category = "Cleanup"
command = "${CARGO}"
args = ["clean"]

[tasks.clean-contracts]
category = "Cleanup"
script = '''
rm -Rf etc/eth-contracts/res
'''

[tasks.clean-bin]
category = "Cleanup"
script = '''
rm -Rf bin
'''

[tasks.clean-flow]
category = "Cleanup"
dependencies = [
    "clean-cargo",
    "clean-contracts",
    "clean-bin",
]

[tasks.clean]
run_task = "clean-flow"

[tasks.fmt]
category = "Formatting"
command = "${CARGO}"
args = [
    "fmt",
    "--all",
]

[tasks.clippy]
category = "Check"
command = "${CARGO}"
args = [
    "clippy",
    "--no-default-features",
    "--features",
    "contract",
    "--",
    "-D",
    "warnings",
]

[tasks.check-fmt]
category = "Check"
command = "${CARGO}"
args = [
    "fmt",
    "--",
    "--check",
]

[tasks.check-contracts]
category = "Check"
script = '''
cd etc/eth-contracts
yarn
yarn lint
'''

[tasks.check]
category = "Check"
dependencies = [
    "check-contracts",
    "check-fmt",
    "clippy",
]

[tasks.post-engine-build-env]
category = "Tools"
script = '''
echo "Environment:"
echo "    IS_RELEASE:           ${IS_RELEASE}"
echo "    CARGO_FEATURES:       ${ACTUAL_FEATURES}"
echo "    TARGET_WASM:          ${ACTUAL_WASM}"
echo "    TARGET_DIR:           ${TARGET_DIR}"
'''

[tasks.copy-engine-build]
category = "Post"
command = "cp"
args = [
    "target/wasm32-unknown-unknown/${TARGET_DIR}/aurora_engine.wasm",
    "bin/${ACTUAL_WASM}",
]

[tasks.make-bin-directory]
category = "Post"
command = "mkdir"
args = [
    "-p",
    "bin",
]

[tasks.contracts]
category = "Build"
script = '''
cd etc/eth-contracts
yarn
yarn build
'''

[tasks.cargo-build-engine]
category = "Build"
command = "${CARGO}"
args = [
    "build",
    "--target",
    "${ENGINE_CARGO_TARGET}",
    "@@remove-empty(RELEASE_ARG)",
    "--no-default-features",
    "--features=${ACTUAL_FEATURES}",
    "--verbose",
    "-p",
    "aurora-engine",
    "-Z",
    "avoid-dev-deps",
]

[tasks.build-engine-flow]
category = "Build"
dependencies = [
    "contracts",
    "cargo-build-engine",
    "make-bin-directory",
    "copy-engine-build",
    "post-engine-build-env",
]

[tasks.engine]
env = { "ACTUAL_FEATURES" = "${CARGO_FEATURES}", "ACTUAL_WASM" = "${TARGET_WASM_DEBUG}", "IS_RELEASE" = false, "TARGET_DIR" = "debug" }
category = "Build"
run_task = "build-engine-flow"

[tasks.engine-release]
env = { "ACTUAL_FEATURES" = "${CARGO_FEATURES}", "ACTUAL_WASM" = "${TARGET_WASM}", "RELEASE_ARG" = "--release", "IS_RELEASE" = true, "TARGET_DIR" = "release" }
category = "Build"
run_task = "build-engine-flow"

[tasks.engine-test]
env = { "ACTUAL_FEATURES" = "${CARGO_FEATURES_TEST_BUILD}", "ACTUAL_WASM" = "${TARGET_WASM_TEST}", "RELEASE_ARG" = "--release", "IS_RELEASE" = false, "TARGET_DIR" = "release" }
category = "Build"
run_task = "build-engine-flow"

[tasks.engine-bully]
env = { "ACTUAL_FEATURES" = "${CARGO_FEATURES_BULLY}", "ACTUAL_WASM" = "${TARGET_WASM_BULLY}", "IS_RELEASE" = false, "TARGET_DIR" = "debug" }
category = "Build"
run_task = "build-engine-flow"

[tasks.build]
category = "Build"
dependencies = [
    "contracts",
    "engine",
    "engine-release",
    "engine-test",
    "engine-bully",
]

[tasks.test-contracts]
category = "Test"
script = '''
cd etc/eth-contracts
yarn
yarn test
'''

[tasks.test-workspace]
category = "Test"
command = "${CARGO}"
args = [
    "test",
    "--features",
    "${CARGO_FEATURES_TEST}",
]

[tasks.test-flow]
category = "Test"
dependencies = [
    "engine-test",
    "test-contracts",
    "test-workspace",
]

[tasks.test]
category = "Test"
run_task = "test-flow"

[tasks.deploy]
condition = { profiles = ["mainnet", "testnet"] }
category = "Deploy"
script = "${NEAR} deploy --acount-id${NEAR_EVM_ACCOUNT} --wasm-file=bin/${TARGET_WASM}"
